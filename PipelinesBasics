Jenkins Pipeline
================
(series of tasks done in order on different servers)
* Pipeline as Code
* DSL - Groovy scripts
  1. scripted pipeline
  2. declarative pipeline
* Jenkinsfile - Gitlab repository

Syntax:
------
pipeline {
 stages {
   stage("stage1"){
    agent { }
    steps { }
   }
   stage("stage2"){
    agent { }
    steps { }
   }
 }
}

Example:1

pipeline {
    agent any
    stages {
        stage ('stage1') {
            steps {
                echo 'stage one'
            }
        }
        stage ('stage2') {
            steps {
                echo 'stage two'
            }
        }
    }
}

Example:2
pipeline {
    agent { label 'demo' }
    stages {
        stage ('stage1') {
            steps {
                echo 'stage one'
            }
        }
        stage ('stage2') {
            steps {
                echo 'stage two'
            }
        }
    }
}

Example:3

pipeline {
    agent none
    stages {
        stage ('stage1') {
            agent any 
            steps {
                echo 'stage one'
            }
        }
        stage ('stage2') {
            agent { label 'demo' }
            steps {
                echo 'stage two'
            }
        }
    }
}

Example:4

pipeline {
    agent none
    stages {
        stage ('stage1') {
            agent any 
            steps {
                echo 'stage one'
            }
        }
        stage ('stage2') {
            agent { 
                node {
                    label 'demo'
                    customWorkspace '/tmp/jenkins' 
                }
            }
            steps {
                echo 'stage two'
            }
        }
    }
}

Example:5 ---- ENVIRONMENT variable block

pipeline {
    agent any
    environment {
        NAME = "PRIYA"
    }
    stages {
        stage ('stage1') {
            steps {
                sh 'echo Name = "$NAME"'
            }
        }
        stage ('stage2') {
            agent { 
                node {
                    label 'demo'
                    customWorkspace '/tmp/jenkins' 
                }
            }
            steps {
                echo env.NAME
            }
        }
    }
}

Example:6 ---- ENVIRONMENT variable block

pipeline {
    agent any
    environment {
        NAME = "GLOBAL"
    }
    stages {
        stage ('stage1') {
 environment {
        NAME = "LOCAL"
    }
steps {
                sh 'echo Name = "$NAME"'
            }
        }
        stage ('stage2') {
            agent { 
                node {
                    label 'demo'
                    customWorkspace '/tmp/jenkins' 
                }
            }
            steps {
                echo env.NAME
            }
        }
    }
}

Parameters block:

pipeline {
    agent any
    parameters {
        string(name: 'PERSON', defaultValue: 'Mr Adam', description: 'Who are you?')
        text(name: 'BIOGRAPHY', defaultValue: '', description: 'Enter some information about the person')
        booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')
        choice(name: 'CHOICE', choices: ['One', 'Two', 'Three'], description: 'Pick something')
        password(name: 'PASSWORD', defaultValue: 'SECRET', description: 'Enter a password')      
        file(name: "file.properties", description: "Choose a file to upload")
    }
    stages {
        stage('Example') {
            steps {
                echo "Hello ${params.PERSON}"

                echo "Biography: ${params.BIOGRAPHY}"

                echo "Toggle: ${params.TOGGLE}"

                echo "Choice: ${params.CHOICE}"

                echo "Password: ${params.PASSWORD}"
            }
        }
    }
}

Buils discarder option:

pipeline {
    agent { label 'demo' }
    options {
   buildDiscarder(logRotator(numToKeepStr: '5'))
    }
    stages {
        stage('Stage1') {
            steps {
                echo 'First Stage'
            }
        }
   }
}
---------------------------
Retry option:

pipeline {
    agent { label 'demo' }
    options {
       retry(3)
    }
    stages {
        stage('Stage1') {
            steps {
*                sh 'exit 1'
             }
        }
        stage('stage2') {
            steps {
               sh 'echo Stage 2'
            }
        }
     }
}
---------------------------
pipeline {
    agent { label 'demo' }
    stages {
        stage('Stage1') {
             options {
               retry(3)
             }
            steps {
                sh 'exit 1'
            }
        }
        stage('stage2') {
            steps {
               sh 'echo Stage 2'
            }
        }
     }
}
------------------
Timeout option:

pipeline {
    agent { label 'demo' }
    options {
          timeout(time: 15, unit: 'SECONDS')
          
		  timestamps()
    }
    stages {
        stage('Stage1') {
            steps {
                sh 'sleep 5'
            }
        }
        stage('Stage2') {
            steps {
                sh 'sleep 5'
            }
        }
    }
}
-------------------------------
Git clone option:

pipeline {
    agent { label 'demo' }
    stages {
        stage('Clone Repo') {
            steps {
                echo 'Going to Checkout from Git'
                git changelog: false, poll: false, url: 'https://gitlab.com/scmlearningcentre/mavenbuild.git'
                echo 'Completed Checkout from Git'
            }
        }
    }
}
--------------------------------
Build wait option:

pipeline {
    agent { label 'demo' }
    stages {
        stage('Stage1') {
            steps {
               build wait: false, job: 'child', parameters: [string(name: 'hosts', value: 'param1')]
             }
        }
        stage('Stage2') {
            steps {
                echo 'Testing'
            }
        }
    }
}
-----------------------------
dir block:

pipeline {
    agent { label 'demo' }
    stages {
        stage('Stage1') {
            steps {
                  sh 'touch testfirst'
                  dir('/tmp/jenkins') {
                       sh 'touch DUMMY'
                  }
                  sh 'touch testlast'
            }
        }
    }
}
-------------------------------
catch error block:

pipeline {
    agent any
    stages {
        stage('Stage1') {
          steps {
              catchError(buildResult: 'SUCCESS', message: 'YOU GOT A ERROR', stageResult: 'UNSTABLE') {
                  sh "exit 1"
              }
          }
        }
       stage('Stage2') {
            steps {
                  echo 'Running Stage2'
            }
        }
    }
}

pipeline {
    agent any
    environment { DEPLOY_TO = 'qa'}
    stages {
        stage('Stage1') {
            when {
                             environment name: 'DEPLOY_TO', value: 'qa'
}
            steps {
                  echo 'Running Stage1 for QA'
            }
        }
       stage('Stage2') {
            when {
   environment name: 'DEPLOY_TO', value: 'production'
}
            steps {
                  echo 'Running Stage2 for production'
            }
        }
    }
}

parallel block:

pipeline {
    agent any
    options {
      timestamps()
    }
    stages {
        stage ('Stage1') {
            steps {
                sh 'echo stage1'
                sh 'sleep 10'
            }
        }
        stage ('stage2') {
            steps{
                sh 'echo stage2'
                sh 'sleep 10'
            }
        }
        
        stage ('stage3') {
            parallel {
                stage ('parallel1') {
                    steps {
                        sh 'echo parallel 1'
                        sh 'sleep 10'
                    }
                }
                stage ('parallel2') {
                    steps {
                        sh 'echo parallel 2'
                        sh 'sleep 10'
                }
                }
            }
        }
    }
}
